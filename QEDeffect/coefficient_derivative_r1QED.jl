#using Pkg;Pkg.add("Plots")
using Plots
using Quadmath
# Define the input text
input_text = """

dot(p)_11(L=4)=  8.09904490447095346853037664020953444e-02

dot(p)_11(L=5)=  1.04625211480119845731147245734669966e-01

dot(p)_11(L=6)=  1.29035500874177216029795217816303358e-01

dot(p)_11(L=7)=  1.53401291472105854065359278373728062e-01

dot(p)_11(L=8)=  1.77458505417253615936937385333523859e-01

dot(p)_11(L=9)=  2.01190661973739862201796813821177711e-01

dot(p)_11(L=10)=  2.24654867826198043260769183206749833e-01

dot(p)_11(L=11)=  2.47914477598940673208094088059575299e-01

dot(p)_11(L=12)=  2.71020435527178433780870318118246197e-01

dot(p)_11(L=13)=  2.94009848503548706745470564682675016e-01

dot(p)_11(L=14)=  3.16909010093647379893033582757190588e-01

dot(p)_11(L=15)=  3.39736644488387153218791454513579943e-01

dot(p)_11(L=16)=  3.62506359393082457680218643441524731e-01

dot(p)_11(L=17)=  3.85228303885963937483625332547485262e-01

dot(p)_11(L=18)=  4.07910246131779977161856280112990237e-01

dot(p)_11(L=19)=  4.30558271233171966810818070889210946e-01

dot(p)_11(L=20)=  4.53177240164309688305795473291644359e-01

dot(p)_11(L=21)=  4.75771099432016875408800860501620659e-01

dot(p)_11(L=22)=  4.98343096266927660486064973554167017e-01

dot(p)_11(L=23)=  5.20895932569857893348724670416935616e-01

dot(p)_11(L=24)=  5.43431877971950956054794219138778494e-01

dot(p)_11(L=25)=  5.65952854763982777149603081539891839e-01

dot(p)_11(L=26)=  5.88460502917199852116792451861057864e-01

dot(p)_11(L=27)=  6.10956230659564259459522987081485095e-01

dot(p)_11(L=28)=  6.3344125434629440005661731346421602e-01

dot(p)_11(L=29)=  6.55916630252031196539046034405601907e-01

dot(p)_11(L=30)=  6.78383280174038568051295402195479346e-01

dot(p)_11(L=31)=  7.00842012232265805817578005879630992e-01

dot(p)_11(L=32)=  7.23293537899923778476704528644787419e-01

dot(p)_11(L=33)=  7.45738486046662584135243786732806033e-01

dot(p)_11(L=34)=  7.68177414593451224881738772338248961e-01

dot(p)_11(L=35)=  7.9061082024306883595544138132761919e-01

dot(p)_11(L=36)=  8.13039146648886683016555090618072333e-01

dot(p)_11(L=37)=  8.35462791307924744430129980021035648e-01

dot(p)_11(L=38)=  8.57882111405453737451781160638494152e-01

dot(p)_11(L=39)=  8.80297428793047375365201235325526781e-01

dot(p)_11(L=40)=  9.02709034246640668391576584692180117e-01

dot(p)_11(L=41)=  9.25117191123394221248613087565625172e-01

dot(p)_11(L=42)=  9.47522138514216201591669781526547376e-01

dot(p)_11(L=43)=  9.69924093971323777768633853623913834e-01

dot(p)_11(L=44)=  9.92323255876235439139570745708291716e-01

dot(p)_11(L=45)=  1.01471980550231748447606342355644701

dot(p)_11(L=46)=  1.03711390881688349042540775548631708

dot(p)_11(L=47)=  1.05950571806041938433850866685745813

dot(p)_11(L=48)=  1.08189537313443368342074016800454198

dot(p)_11(L=49)=  1.10428300282444331473060488331663048

dot(p)_11(L=50)=  1.12666872588048896499941747055820447

dot(p)_11(L=51)=  1.14905265197416344671610052079149697

dot(p)_11(L=52)=  1.17143488254829988228509105685634474

dot(p)_11(L=53)=  1.19381551157309817675609050038469772

dot(p)_11(L=54)=  1.21619462622048381086846634354186614

dot(p)_11(L=55)=  1.23857230746682446411294449135356588

dot(p)_11(L=56)=  1.26094863063272242446864605933170451

dot(p)_11(L=57)=  1.28332366586740955514740591495206069

dot(p)_11(L=58)=  1.30569747858426041946521090327287970

dot(p)_11(L=59)=  1.32807012985307827523192601937458939

dot(p)_11(L=60)=  1.35044167675407362176684853093172966

dot(p)_11(L=61)=  1.37281217269782569473726459459721046

dot(p)_11(L=62)=  1.39518166771497711968852261742055201

dot(p)_11(L=63)=  1.41755020871894705334200349954604165

dot(p)_11(L=64)=  1.43991783974454707757703220078034206

"""

#Extrapolation
const delta = 1
const Lmin = 4

# Extract the numbers using a regular expression
f = [parse(Float128, match(r"[-+]?\d*\.\d+([eE][-+]?\d+)?", line).match) for line in split(input_text, '\n') if match(r"[-+]?\d*\.\d+([eE][-+]?\d+)?", line)!==nothing]

print(f)


function R0(f)
    R0f = Array{Float128}(undef, length(f) - delta)
    for i in 1:length(f)-delta
        L = Lmin -1 +i
        R0f[i] = Float128(L / delta) * (f[i+delta] - f[i])
    end
    return R0f
end

function Rnu(nu, f)
    Rnuf = Array{Float128}(undef, length(f) - delta)
    for i in 1:length(f)-delta
        L = Lmin -1 +i
        Rnuf[i] = f[i] + Float128(L / (nu * delta)) * (f[i+delta] - f[i])
    end
    return Rnuf
end



function extrapolationf(f)
    final =  Rnu(2,Rnu(2,Rnu(1,Rnu(1,f))))
    print(final)
    for l in 1:length(final)
        @inbounds begin
            L = l - 1 + Lmin
            final[l] = L*(f[l]-final[l])
            println(' ')
        println("F1(L=$L)= ", final[l])
        end
    end
    return final
end

# scale by 1/L
for i in 1:length(f)
    L = Lmin-1+i
    f[i] = f[i] / L
end
println(" -------------------------------------------------------- ")
final1 = extrapolationf(f)
final = Rnu(3,Rnu(3,Rnu(2,Rnu(2,Rnu(1,Rnu(1,final1))))))
error = Float128[]
for l in 1:length(final)
        L = l - 1 + Lmin
        println(' ')
        println("Final(L=$L)= ", final[l])
        x = (Float128(final[l])-0.012)/0.012*100
        append!(error, x)
        println("abs error = ",final[l]-0.012)
        println("%error = $x %")
end

#Plots
Lrange = Lmin:length(final)+Lmin-1
p1 = plot(45:length(final)+Lmin-1, final[42:length(final)],seriestype=:scatter,ms=1, ma=0.5, label="Final", xlabel="L", ylabel="Final", title="Plot of Final vs L")
p1 = hline!([0.012], label="r1' = 0.012", linestyle=:dash, color=:red)
p3 = plot(45:length(final)+Lmin-1, error[42:length(final)], label="%error", xlabel="L", ylabel="%error", title="Plot of %errors from L=30")
plot(p1, p3, layout=(2,1))
