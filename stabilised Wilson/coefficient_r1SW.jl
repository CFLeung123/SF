#using Pkg;Pkg.add("Plots")
using Plots
using Quadmath
# Define the input text
input_text = """
p_11(L=4)=  -1.43966187815538833860407283533213198e-02

p_11(L=5)=  -1.6669583992151148834570443385049705e-02

p_11(L=6)=  -1.85209427837390158941230202113181857e-02

p_11(L=7)=  -2.0088073199621243207181486933909886e-02

p_11(L=8)=  -2.14302925561276205212730496485056634e-02

p_11(L=9)=  -2.25951756468364758198143393265522884e-02

p_11(L=10)=  -2.36207379665837352663036577497043872e-02

p_11(L=11)=  -2.4535704028279538745684671832451178e-02

p_11(L=12)=  -2.53613546262607908951218007192919171e-02

p_11(L=13)=  -2.61135426696724953736743803993109734e-02

p_11(L=14)=  -2.68042798791909145597030248831405526e-02

p_11(L=15)=  -2.74428540530728367691054731509271041e-02

p_11(L=16)=  -2.8036589618459344113737981667017067e-02

p_11(L=17)=  -2.85913656644153963406260101239529807e-02

p_11(L=18)=  -2.9111974436046867453968475899825276e-02

p_11(L=19)=  -2.96023748026308143417881155561105959e-02

p_11(L=20)=  -3.00658754824385838247670696091638043e-02

p_11(L=21)=  -3.050527025891953868360365919455028e-02

p_11(L=22)=  -3.09229396323250817161079001761296756e-02

p_11(L=23)=  -3.13209284968138779705584479463390708e-02

p_11(L=24)=  -3.17010063582442319621528068084393298e-02

p_11(L=25)=  -3.206471461689009048670738210772131e-02

p_11(L=26)=  -3.24134041199951038657881019037620322e-02

p_11(L=27)=  -3.2748265295231537129007254596965289e-02

p_11(L=28)=  -3.30703525581315914639171070221903991e-02

p_11(L=29)=  -3.33806042514323433059835033586686303e-02

p_11(L=30)=  -3.36798590628953457556501948074320937e-02

p_11(L=31)=  -3.39688696420785851116118975883402481e-02

p_11(L=32)=  -3.42483139702284331167037400955569893e-02

p_11(L=33)=  -3.45188049136610675382894682479760935e-02

p_11(L=34)=  -3.47808982978461220148640053614322547e-02

p_11(L=35)=  -3.50350997686035689522694419875747715e-02

p_11(L=36)=  -3.52818706525145063319121483279273756e-02

p_11(L=37)=  -3.55216329866271333714793371012129626e-02

p_11(L=38)=  -3.57547738547674745054285477966360855e-02

p_11(L=39)=  -3.59816491420123545307839794191884359e-02

p_11(L=40)=  -3.62025867985027661940059797281930696e-02

p_11(L=41)=  -3.64178896875405884626470066574507601e-02

p_11(L=42)=  -3.66278380798964448709693605258365945e-02

p_11(L=43)=  -3.68326918457605730829229853747702374e-02

p_11(L=44)=  -3.70326923872565434467443896576847386e-02

p_11(L=45)=  -3.72280643474976006152412298340061871e-02

p_11(L=46)=  -3.7419017126478242174792900023492713e-02

p_11(L=47)=  -3.76057462294106662484990188819037543e-02

p_11(L=48)=  -3.77884344692418467213340373239773637e-02

p_11(L=49)=  -3.79672530418683573086069058130515729e-02

p_11(L=50)=  -3.81423624898806190763986107542825377e-02

p_11(L=51)=  -3.83139135684186805435775943725678454e-02

p_11(L=52)=  -3.84820480248299779190333404139862593e-02

p_11(L=53)=  -3.86468993022229796149209738905749757e-02

p_11(L=54)=  -3.88085931756584075421655343603328783e-02

p_11(L=55)=  -3.896724832857058644672305893420001e-02

p_11(L=56)=  -3.91229768760317371145372286348219142e-02

p_11(L=57)=  -3.92758848406341217140518838318889692e-02

p_11(L=58)=  -3.94260725860461899259323881672646314e-02

p_11(L=59)=  -3.95736352126805410195621089536941371e-02

p_11(L=60)=  -3.97186629193780994104177610104313583e-02

p_11(L=61)=  -3.98612413345515051604430732804739296e-02

p_11(L=62)=  -4.00014518198305908760879343122081543e-02

p_11(L=63)=  -4.0139371748904952077996672032314977e-02

p_11(L=64)=  -4.02750747639554640980303257824477769e-02
"""

#Extrapolation
const delta = 1
const Lmin = 4

# Extract the numbers using a regular expression
f = [parse(Float128, match(r"[-+]?\d*\.\d+([eE][-+]?\d+)?", line).match) for line in split(input_text, '\n') if match(r"[-+]?\d*\.\d+([eE][-+]?\d+)?", line) !== nothing]

print(f)


function R0(f)
    R0f = Array{Float128}(undef, length(f) - delta)
    for i in 1:length(f)-delta
        L = Lmin - 1 + i
        R0f[i] = Float128(L / delta) * (f[i+delta] - f[i])
    end
    return R0f
end

function Rnu(nu, f)
    Rnuf = Array{Float128}(undef, length(f) - delta)
    for i in 1:length(f)-delta
        L = Lmin - 1 + i
        Rnuf[i] = f[i] + Float128(L / (nu * delta)) * (f[i+delta] - f[i])
    end
    return Rnuf
end

function shiftf(f)
    sf = copy(f)
    for i in 1:length(sf)
        L = i - 1 + Lmin
        sf[i] = sf[i] + 1 / (12 * Float128(pi)^2) * Float128(log(L))
    end
    return sf
end

function extrapolationf(f)
    shifted_f = shiftf(f)
    r0f = R0(shifted_f)
    final = similar(r0f, Float128)
    log_term = -1 / (12 * Float128(pi)^2)

    @views for l in 1:length(r0f)
        L = l - 1 + Lmin
        final[l] = -r0f[l] * L
        #final[l] = L * (f[l] - (r0f[l]) - (log_term * Float128(log(L))))
        println(' ')
        println("F1(L=$L)= ", final[l])
    end

    return final
end


L_values = []
f_values = []
println(" -------------------------------------------------------- ")
final1 = extrapolationf(f)
final = Rnu(2, Rnu(2, Rnu(1, Rnu(1, final1))))
error = Float128[]
for l in 1:length(final)
    L = l - 1 + Lmin
    println(' ')
    println("Final(L=$L)= ", final[l])
    if L > 0
        push!(L_values, L)
        push!(f_values, final[l])
    end
end

# 计算1/L
inv_L = 1.0 ./ L_values

# 创建图形
plot(inv_L, f_values,
    seriestype=:scatter,
    xlabel="a/L",
    ylabel="r0",
    label="Data Points",
    markersize=2,
    markercolor=:black,
    title="r0 vs. a/L",
    legend=:bottomleft,
    grid=true,
    dpi=300)
xlims!(minimum(inv_L)*0.95, 1.05*maximum(inv_L))
ylims!(0.9991*minimum(f_values), maximum(f_values))
baseval = 0.0107301
hline!([baseval],label = "baseline=$baseval", linestyle=:dash, color=:red)

# 保存为高分辨率图片（可选）
savefig("r1SWv1.png")

# 显示图形
display(plot!())
println(" -------------------------------------------------------- ")