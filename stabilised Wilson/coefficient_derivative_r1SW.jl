#using Pkg;Pkg.add("Plots")
using Plots
using Quadmath
# Define the input text
input_text = """
dot(p)_11(L=4)=  3.64206917565083701774153760088257832e-02

dot(p)_11(L=5)=  4.7608825267196308541286607966626192e-02

dot(p)_11(L=6)=  5.82699643659506978113879129236589514e-02

dot(p)_11(L=7)=  6.87031123253090806416678694119704845e-02

dot(p)_11(L=8)=  7.89752312167173166405097914293694544e-02

dot(p)_11(L=9)=  8.91177218077488310712902506013697346e-02

dot(p)_11(L=10)=  9.91570386085865140033606379418553971e-02

dot(p)_11(L=11)=  1.09115755586793066490758772865371057e-01

dot(p)_11(L=12)=  1.19011756156040671716351307134513687e-01

dot(p)_11(L=13)=  1.28858599240767640529689302382595576e-01

dot(p)_11(L=14)=  1.38666416812919606032026471971971972e-01

dot(p)_11(L=15)=  1.48442803772389351373743335778671448e-01

dot(p)_11(L=16)=  1.58193521153181710058947091832347826e-01

dot(p)_11(L=17)=  1.67923005462696225252664719477109133e-01

dot(p)_11(L=18)=  1.7763472635252167662872412146318839e-01

dot(p)_11(L=19)=  1.87331436816182935389136053785836856e-01

dot(p)_11(L=20)=  1.970153498699529777917431255655351e-01

dot(p)_11(L=21)=  2.06688265239793656885105467603401245e-01

dot(p)_11(L=22)=  2.1635166175791274919657572840258972e-01

dot(p)_11(L=23)=  2.26006765879941576923590035266648877e-01

dot(p)_11(L=24)=  2.3565460328066400491799804598557961e-01

dot(p)_11(L=25)=  2.4529603824923486500201816230325771e-01

dot(p)_11(L=26)=  2.54931804144279891016052112024446465e-01

dot(p)_11(L=27)=  2.64562527201183094669328196615067329e-01

dot(p)_11(L=28)=  2.74188745330582675559714376847863682e-01

dot(p)_11(L=29)=  2.83810923098109231194387578320975149e-01

dot(p)_11(L=30)=  2.93429463761419115907671018052323621e-01

dot(p)_11(L=31)=  3.03044719017487526197906946038513081e-01

dot(p)_11(L=32)=  3.12656996952328304236631484645661437e-01

dot(p)_11(L=33)=  3.22266568567902919621030868267366799e-01

dot(p)_11(L=34)=  3.3187367317425560016695078237593573e-01

dot(p)_11(L=35)=  3.41478522870167087330713408819027399e-01

dot(p)_11(L=36)=  3.51081306286814449664327525058898517e-01

dot(p)_11(L=37)=  3.6068219173180467096044995693183936e-01

dot(p)_11(L=38)=  3.70281329842482613322776706256000728e-01

dot(p)_11(L=39)=  3.79878855835413078155616585250888266e-01

dot(p)_11(L=40)=  3.8947489142180961541761218997968255e-01

dot(p)_11(L=41)=  3.99069546445258609414522355763531392e-01

dot(p)_11(L=42)=  4.08662920287497538816946758504967648e-01

dot(p)_11(L=43)=  4.18255103079601716417133148548138431e-01

dot(p)_11(L=44)=  4.27846176749224845045229310210451817e-01

dot(p)_11(L=45)=  4.37436215929153892017233112912101077e-01

dot(p)_11(L=46)=  4.47025288748094178047846048225083856e-01

dot(p)_11(L=47)=  4.56613457521077815165491115132458773e-01

dot(p)_11(L=48)=  4.6620077935401869599031842888773407e-01

dot(p)_11(L=49)=  4.75787306674588557960879655446483123e-01

dot(p)_11(L=50)=  4.85373087699658218725324047183769349e-01

dot(p)_11(L=51)=  4.94958166847954839205368360908024874e-01

dot(p)_11(L=52)=  5.04542585105265895225805175516670864e-01

dot(p)_11(L=53)=  5.14126380348422455930840985786744624e-01

dot(p)_11(L=54)=  5.23709587633377671445945221023799319e-01

dot(p)_11(L=55)=  5.33292239451928409228316022669599441e-01

dot(p)_11(L=56)=  5.42874365960982440362817937234899601e-01

dot(p)_11(L=57)=  5.52455995187729180835492669268901236e-01

dot(p)_11(L=58)=  5.62037153213611452279494564833585093e-01

dot(p)_11(L=59)=  5.71617864339604947783228036785906175e-01

dot(p)_11(L=60)=  5.8119815123497953725498562341013892e-01

dot(p)_11(L=61)=  5.90778035071432751240626301668141943e-01

dot(p)_11(L=62)=  6.00357535644242935965876309433862625e-01

dot(p)_11(L=63)=  6.09936671481881221502917323490565056e-01

dot(p)_11(L=64)=  6.19515459945342235707356011774273329e-01
"""

#Extrapolation
const delta = 1
const Lmin = 4

# Extract the numbers using a regular expression
f = [parse(Float128, match(r"[-+]?\d*\.\d+([eE][-+]?\d+)?", line).match) for line in split(input_text, '\n') if match(r"[-+]?\d*\.\d+([eE][-+]?\d+)?", line)!==nothing]

print(f)


function R0(f)
    R0f = Array{Float128}(undef, length(f) - delta)
    for i in 1:length(f)-delta
        L = Lmin -1 +i
        R0f[i] = Float128(L / delta) * (f[i+delta] - f[i])
    end
    return R0f
end

function Rnu(nu, f)
    Rnuf = Array{Float128}(undef, length(f) - delta)
    for i in 1:length(f)-delta
        L = Lmin -1 +i
        Rnuf[i] = f[i] + Float128(L / (nu * delta)) * (f[i+delta] - f[i])
    end
    return Rnuf
end



function extrapolationf(f)
    final =  Rnu(2,Rnu(2,Rnu(1,Rnu(1,f))))
    for l in 1:length(final)
        @inbounds begin
            L = l - 1 + Lmin
            final[l] = L*(f[l]-final[l])
            println(' ')
        println("F1(L=$L)= ", final[l])
        end
    end
    return final
end

# scale by 1/L
for i in 1:length(f)
    L = Lmin-1+i
    f[i] = f[i] / L
    println(' ')
    println("f(L=$L)/L= ", f[i])
end
println(" -------------------------------------------------------- ")
final1 = extrapolationf(f)                          # extrapolate l*(p_{1,1}'[l] - R_2^2 R_1^2 p_{1,1}'[l])
final = Rnu(3,Rnu(3,Rnu(2,Rnu(2,Rnu(1,Rnu(1,final1)))))) # extrapolate r1'
error = Float128[]
for l in 1:length(final)
        L = l - 1 + Lmin
        println(' ')
        println("Final(L=$L)= ", final[l])
        x = (Float128(final[l])-0.00775)/0.00775*100
        append!(error, x)
        println("abs error = ",final[l]-0.00775)
        println("%error = $x %")
end

#Plots
Lrange = Lmin:length(final)+Lmin-1
p1 = plot(30:length(final)+Lmin-1, final,seriestype=:scatter,ms=2, ma=0.5, label="Final", xlabel="L", ylabel="Final", title="Plot of Final vs L")
p1 = hline!([0.012], label="r1'", linestyle=:dash, color=:red)
p3 = plot(30:length(final)+Lmin-1, error[27:length(final)], label="%error", xlabel="L", ylabel="%error", title="Plot of %errors from L=30")
plot(p1, p3, layout=(2,1))
