#using Pkg;Pkg.add("Plots")
using Plots
using Quadmath
# Define the input text
input_text = """
p_11(L=4)=  -3.67684393132183026620719243289343935e-02

p_11(L=5)=  -4.04690492227564739193475988707781569e-02

p_11(L=6)=  -4.32546872202945850700520235181476573e-02

p_11(L=7)=  -4.548376879100946104053900120357911e-02

p_11(L=8)=  -4.73204219966916208184523421283365545e-02

p_11(L=9)=  -4.88690023374854247173659460163485691e-02

p_11(L=10)=  -5.02011261294437053598022286254196593e-02

p_11(L=11)=  -5.13667229991288805468409586994169422e-02

p_11(L=12)=  -5.24011358527335769010442890080766188e-02

p_11(L=13)=  -5.33299190482535744856687589373625642e-02

p_11(L=14)=  -5.41719976514678789479329899395036655e-02

p_11(L=15)=  -5.4941721072371787243047620454581307e-02

p_11(L=16)=  -5.56502056797480250101671048596767244e-02

p_11(L=17)=  -5.63062279845386098457471512264759706e-02

p_11(L=18)=  -5.69168325121056955836494454011715531e-02

p_11(L=19)=  -5.74877555310876348435524394288049848e-02

p_11(L=20)=  -5.8023727268441908316050301735107173e-02

p_11(L=21)=  -5.85286920147215342122396660234520998e-02

p_11(L=22)=  -5.90059714555819010135542849327260099e-02

p_11(L=23)=  -5.94583879056578023383035481864585339e-02

p_11(L=24)=  -5.98883586750009223940408863968398607e-02

p_11(L=25)=  -6.02979692936137365658555356052661321e-02

p_11(L=26)=  -6.06890310125810315796998319516117587e-02

p_11(L=27)=  -6.10631264490538874951371045916264363e-02

p_11(L=28)=  -6.14216461788415123503254368438939096e-02

p_11(L=29)=  -6.17658183383307785098995053825986976e-02

p_11(L=30)=  -6.20967327714270396520179985577099655e-02

p_11(L=31)=  -6.24153608789079172364021407451635526e-02

p_11(L=32)=  -6.2722572051930369373935403695274666e-02

p_11(L=33)=  -6.30191473681517703818455038524783538e-02

p_11(L=34)=  -6.3305791077350908674869005859761307e-02

p_11(L=35)=  -6.35831402892516234009775824718771285e-02

p_11(L=36)=  -6.38517731894146797614014154578485092e-02

p_11(L=37)=  -6.4112216042435082193519699760318916e-02

p_11(L=38)=  -6.43649491901334548981524461469355874e-02

p_11(L=39)=  -6.46104122122367186999114468442197601e-02

p_11(L=40)=  -6.48490083854734257400465709956200411e-02

p_11(L=41)=  -6.50811085520408717803605676082234782e-02

p_11(L=42)=  -6.53070544885248947514211415630027775e-02

p_11(L=43)=  -6.55271618504327610168396397115842822e-02

p_11(L=44)=  -6.5741722754672768017793500027795614e-02

p_11(L=45)=  -6.59510080519225151623365439920560918e-02

p_11(L=46)=  -6.61552693323644526417013321668486177e-02

p_11(L=47)=  -6.63547407013398371727388829555033417e-02

p_11(L=48)=  -6.65496403557747419242697917084783459e-02

p_11(L=49)=  -6.67401719875244994079273342111794937e-02

p_11(L=50)=  -6.69265260358768492289192962677423272e-02

p_11(L=51)=  -6.71088808081992570693332206509899105e-02

p_11(L=52)=  -6.72874034849929582260220857831669812e-02

p_11(L=53)=  -6.74622510233296416876242261301064035e-02

p_11(L=54)=  -6.76335709707194005821440830460546395e-02

p_11(L=55)=  -6.78015021998284574629070131150311983e-02

p_11(L=56)=  -6.79661755730817591331920106498847553e-02

p_11(L=57)=  -6.81277145450076862711532790794708846e-02

p_11(L=58)=  -6.82862357091761689234751665648424809e-02

p_11(L=59)=  -6.8441849295719777972964734739271001e-02

p_11(L=60)=  -6.8594659624687063593511865279737917e-02

p_11(L=61)=  -6.87447655198396557124460199736724458e-02

p_11(L=62)=  -6.88922606869537504342398586072307795e-02

p_11(L=63)=  -6.90372340602095166439607953398742662e-02

p_11(L=64)=  -6.91797701198377485347864655488524213e-02
"""

#Extrapolation
const delta = 1
const Lmin = 4

# Extract the numbers using a regular expression
f = [parse(Float128, match(r"[-+]?\d*\.\d+([eE][-+]?\d+)?", line).match) for line in split(input_text, '\n') if match(r"[-+]?\d*\.\d+([eE][-+]?\d+)?", line) !== nothing]

print(f)


function R0(f)
    R0f = Array{Float128}(undef, length(f) - delta)
    for i in 1:length(f)-delta
        L = Lmin - 1 + i
        R0f[i] = Float128(L / delta) * (f[i+delta] - f[i])
    end
    return R0f
end

function Rnu(nu, f)
    Rnuf = Array{Float128}(undef, length(f) - delta)
    for i in 1:length(f)-delta
        L = Lmin - 1 + i
        Rnuf[i] = f[i] + Float128(L / (nu * delta)) * (f[i+delta] - f[i])
    end
    return Rnuf
end

function shiftf(f)
    sf = copy(f)
    for i in 1:length(sf)
        L = i - 1 + Lmin
        sf[i] = sf[i] + 1 / (12 * Float128(pi)^2) * Float128(log(L))
    end
    return sf
end

function extrapolationf(f)
    shifted_f = shiftf(f)
    r0f = R0(shifted_f)
    final = similar(r0f, Float128)
    log_term = -1 / (12 * Float128(pi)^2)

    @views for l in 1:length(r0f)
        L = l - 1 + Lmin
        final[l] = -r0f[l] * L
        #final[l] = L * (f[l] - (r0f[l]) - (log_term * Float128(log(L))))
        println(' ')
        println("F1(L=$L)= ", final[l])
    end

    return final
end


L_values = []
f_values = []
println(" -------------------------------------------------------- ")
final1 = extrapolationf(f)
final = Rnu(2, Rnu(2, Rnu(1, Rnu(1, final1))))
error = Float128[]
for l in 1:length(final)
    L = l - 1 + Lmin
    println(' ')
    println("Final(L=$L)= ", final[l])
    if L > 0
        push!(L_values, L)
        push!(f_values, final[l])
    end
end

# 计算1/L
inv_L = 1.0 ./ L_values

# 创建图形
plot(inv_L, f_values,
    seriestype=:scatter,
    xlabel="a/L",
    ylabel="r0",
    label="Data Points",
    markersize=2,
    markercolor=:black,
    title="r0 vs. a/L",
    legend=:bottomleft,
    grid=true,
    dpi=300)
xlims!(minimum(inv_L)*0.95, 1.05*maximum(inv_L))
ylims!(0.9991*minimum(f_values), maximum(f_values))
baseval = 0.038283
hline!([baseval],label = "baseline=$baseval", linestyle=:dash, color=:red)

# 保存为高分辨率图片（可选）
savefig("r1v1.png")

# 显示图形
display(plot!())
println(" -------------------------------------------------------- ")