#using Pkg;Pkg.add("Plots")
using Plots
using Quadmath
# Define the input text
input_text = """
dot(p)_11(L=4)=  4.06644614491804513441452566932333602e-02

dot(p)_11(L=5)=  5.18711757366512642969981462740987582e-02

dot(p)_11(L=6)=  6.25335624963018836615989527298748035e-02

dot(p)_11(L=7)=  7.29651117622648387161274914481192442e-02

dot(p)_11(L=8)=  8.32353491549957726458719851683446882e-02

dot(p)_11(L=9)=  9.33761748042424242560688309094449739e-02

dot(p)_11(L=10)=  1.03414110425803600832697643816283708e-01

dot(p)_11(L=11)=  1.13371699857364656033962412638168456e-01

dot(p)_11(L=12)=  1.2326677981480490150572379413128237e-01

dot(p)_11(L=13)=  1.33112866383860486372123445407280253e-01

dot(p)_11(L=14)=  1.42920056704080880345983972583426333e-01

dot(p)_11(L=15)=  1.52695918495843975252458732859517217e-01

dot(p)_11(L=16)=  1.62446191871115910458938439258295423e-01

dot(p)_11(L=17)=  1.72175297258459779660282612072057424e-01

dot(p)_11(L=18)=  1.81886691902228052011152383072260812e-01

dot(p)_11(L=19)=  1.91583119155591778242297899590241053e-01

dot(p)_11(L=20)=  2.01266784482241970607954512066353126e-01

dot(p)_11(L=21)=  2.10939481638856667853334384013983127e-01

dot(p)_11(L=22)=  2.20602684697516206461509866192014019e-01

dot(p)_11(L=23)=  2.30257616284547611529946750083071468e-01

dot(p)_11(L=24)=  2.39905298968026691635485841882216554e-01

dot(p)_11(L=25)=  2.49546594496121073647505759247083701e-01

dot(p)_11(L=26)=  2.59182234133086119806363626240854865e-01
 
dot(p)_11(L=27)=  2.68812842375397160385399006511274672e-01

dot(p)_11(L=28)=  2.78438955679915523036944911607018755e-01

dot(p)_11(L=29)=  2.88061037388930621204692599963314199e-01

dot(p)_11(L=30)=  2.97679489724324182610592217771283841e-01

dot(p)_11(L=31)=  3.07294663501010570471621817514417035e-01

dot(p)_11(L=32)=  3.16906866049729966822408370390622651e-01

dot(p)_11(L=33)=  3.26516367722390895212903616028380555e-01

dot(p)_11(L=34)=  3.36123407266817142977056540327856223e-01

dot(p)_11(L=35)=  3.45728196293293007962384080060665951e-01

dot(p)_11(L=36)=  3.55330923006706297854831087981335322e-01

dot(p)_11(L=37)=  3.64931755341126345979738282214623629e-01

dot(p)_11(L=38)=  3.74530843605305913913935403869060731e-01

dot(p)_11(L=39)=  3.84128322725685050096201799251892258e-01

dot(p)_11(L=40)=  3.93724314156416698620783969482039253e-01

dot(p)_11(L=41)=  4.03318927512562616388838987963119051e-01

dot(p)_11(L=42)=  4.12912261972059435565100124379310381e-01

dot(p)_11(L=43)=  4.22504407483681952694490407659497799e-01

dot(p)_11(L=44)=  4.32095445811546677457965472159441166e-01

dot(p)_11(L=45)=  4.41685451441333457087331043587320752e-01

dot(p)_11(L=46)=  4.51274492369073912024264520118310615e-01

dot(p)_11(L=47)=  4.60862630789845009370134276718247711e-01

dot(p)_11(L=48)=  4.70449923700846045418993586997581933e-01

dot(p)_11(L=49)=  4.8003642343099656566551355152455033e-01

dot(p)_11(L=50)=  4.89622178107268729387367047297744176e-01

dot(p)_11(L=51)=  4.99207232066379580647731927005626507e-01

dot(p)_11(L=52)=  5.08791626219152742208141039476649423e-01

dot(p)_11(L=53)=  5.18375398373764425612234088389089452e-01

dot(p)_11(L=54)=  5.27958583523174795420542131014226479e-01

dot(p)_11(L=55)=  5.37541214101280103894950733992635507e-01

dot(p)_11(L=56)=  5.47123320211677411385085475422001867e-01

dot(p)_11(L=57)=  5.56704929832390919971619008573860451e-01

dot(p)_11(L=58)=  5.66286068999449747715549811784376983e-01

dot(p)_11(L=59)=  5.7586676197181731258325670427915784e-01

dot(p)_11(L=60)=  5.85447031379840884015189858038783373e-01

dot(p)_11(L=61)=  5.95026898359106855474722353957177014e-01

dot(p)_11(L=62)=  6.04606382671345112787353532623370279e-01

dot(p)_11(L=63)=  6.14185502813818087346228006410950593e-01

dot(p)_11(L=64)=  6.23764276118451353777034352753829208e-01

"""

#Extrapolation
const delta = 1
const Lmin = 4

# Extract the numbers using a regular expression
f = [parse(Float128, match(r"[-+]?\d*\.\d+([eE][-+]?\d+)?", line).match) for line in split(input_text, '\n') if match(r"[-+]?\d*\.\d+([eE][-+]?\d+)?", line) !== nothing]

print(f)


function R0(f)
    R0f = Array{Float128}(undef, length(f) - delta)
    for i in 1:length(f)-delta
        L = Lmin - 1 + i
        R0f[i] = Float128(L / delta) * (f[i+delta] - f[i])
    end
    return R0f
end

function Rnu(nu, f)
    Rnuf = Array{Float128}(undef, length(f) - delta)
    for i in 1:length(f)-delta
        L = Lmin - 1 + i
        Rnuf[i] = f[i] + Float128(L / (nu * delta)) * (f[i+delta] - f[i])
    end
    return Rnuf
end



function extrapolationf(f)
    final = Rnu(2, Rnu(2, Rnu(1, Rnu(1, f))))
    print(final)
    for l in 1:length(final)
        @inbounds begin
            L = l - 1 + Lmin
            final[l] = L * (f[l] - final[l])
            println(' ')
            println("F1(L=$L)= ", final[l])
        end
    end
    return final
end

# scale by 1/L
for i in 1:length(f)
    L = Lmin - 1 + i
    f[i] = f[i] / L
end
println(" -------------------------------------------------------- ")
final1 = extrapolationf(f)
final = Rnu(3, Rnu(3, Rnu(2, Rnu(2, Rnu(1, Rnu(1, final1))))))

L_values = []
f_values = []

for l in 1:length(final)
    L = l - 1 + Lmin
    println(' ')
    println("Final(L=$L)= ", final[l])
    if L > 0
        push!(L_values, L)
        push!(f_values, final[l])
    end
end

# 计算1/L
inv_L = 1.0 ./ L_values

# 创建图形
plot(inv_L, f_values,
    seriestype=:scatter,
    xlabel="a/L",
    ylabel="d r1 / dz",
    label="Data Points",
    markersize=2,
    markercolor=:black,
    title="d r1 / dz vs. a/L",
    legend=:bottomleft,
    grid=true,
    dpi=300)
xlims!(minimum(inv_L) * 0.95, 1.05 * maximum(inv_L))
ylims!(0.99 * minimum(f_values), maximum(f_values))
baseval = 0.012001
hline!([baseval], label="baseline=$baseval", linestyle=:dash, color=:red)

# 保存为高分辨率图片（可选）
savefig("dr1v1.png")

# 显示图形
display(plot!())
println(" -------------------------------------------------------- ")